https://www.youtube.com/watch?v=1pfTxp25MA8

하이라이트
1.레이어드 아키텍처를 따르는 대표적인 예가 네트워크 시스템이다.
네트워크 시스템은 하나의 커다란 소프트웨어이다. osi는 이 소프트웨어의 구조를 설명하는 것이다.


1.피지컬 레이어 : 물리적으로, 전선으로 연결된 두 대의 컴퓨터가 0과 1의 나열을 주고받을 수 있게 해주는 모듈.
두대의 컴퓨터가 통신하려면? 
0,1을 주고 받는 것이다.
전선하나로 연결하면 1을 보낼 때 +5v이상, 0을 보낼 때 -5v를 흘려보내면 된다.
0과1만 주고 받을 수 있으면 모든 데이터를 주고 받을 수 있으므로 두 컴퓨터는 모든 데이터를 주고 받을 수 있다.
하지만 실제 상황에서는 잘 동작하지 않았다.
그 이유는 주파수가 변동성이 높고 전선에 물리적 한계가 있기 때문이다.
피지컬 레이어는 phy칩,1계층 모듈은 인코더, 디코더 회로로 구현돼 있다.


2.data-link layer
여러 대의 컴퓨터가 통신하려면?
전선으로 모두 연결해야 할까?
그렇다면 비용이 매우 높아질 것이다.
따라서 전선 하나로 여러 대의 컴퓨터와 통신할 방법을 모색해야 한다.
전기가 통하는 한 가지 선에 여러 대의 컴퓨터가 연결돼 있다면?
일일이 연결할 필요가 없다.
구리 전선을 더미 허브라고 한다.
하지만 한명에게만 데이터를 보내려고하면 다른 두대도 받을 수 있다.
더미 허브는 메시지의 목적지를 확인해서 해당 대상에게만 보내는 기능을 추가한 것이 스위치이다.
만약 여러개의 스위치가 있다면? 다른 네트워크, 인트라 넷에 있는 사람에게 보내고 싶다면?
전선으로 연결돼 있지 않다면 보낼 수 없다. 때문에 스위치끼리 연결해야 하는데 이를 가능하게 하는 것이 라우터이다.
라우터를 통해 여러개의 스위치(네트워크, 인트라넷)을 연결하고 이렇게 연결된 네트워크를 인터넷이라고 한다.
국가간 통신은 해저 케이블을 통해 연결된다.

3.네트워크 레이어
데이터를 보낼 때 데이터 앞에 대상 컴퓨터의 주소를 붙이는데 이를 ip주소라고 한다.
여기서 데이터 + ip주소 = 패킷이라고 부른다.
패킷은 바로 위의 라우터보내고 만약 해당 라우터에 ip주소가 연결되지 않았다면
상위 라우터로 보낸다. 만약 상위 라우터의 하위 라우터 중에 ip주소를 포함하는 것이 있다면
해당 하위 라우터로 이동한다. 이런 과정을 라우팅이라고 한다.
다음 라우터에 데이터를 넘겨주는 것이 포워딩이다.
아날로그 신호가 돼 라우터에 보내고 일련의 과정을 거쳐 다시 다른 라우터 혹은 컴퓨터에 보낸다.
네트워크 기술은 운영체제의 커널에 포함돼 있다.

4.transport 레이어
인터넷상의 모든 컴퓨터가 서로 통신할 수 있게 됐다.
컴퓨터는 받은 3개의 데이터를 프로세스(프로그램들 ex 카카오톡 등..)들에게 분배해야 한다.
데이터를 받을 프로세스들은 포트번호를 가져야 한다.
카톡은 8800포트, 배민은 9000포트를 가졌다고 해보자.
송신자가 데이터를 보낼 때 미리 포트 번호를 알고 보내줘야 한다.
송신자는 이미 포트 번호를 알고 있다.
naver.com:80은 되지만 81은 안된다.
포트번호+데이터가 들어오면 해당 포트번호의 프로세스에 데이터를 준다.
포트 번호를 사용하여 최종 도착지인 프로세스에 데이터가 도달하게 하는 모듈
운영체제의 커널에 소프트웨이어적으로 구현돼 있음.

5.애플리케이션 레이어
osi는 7개의 계층으로 나뉘어 있다.
섹션, 프레젠테이션 레이어를 건너뛰는 이유는 
현재 사용하는 것은 대부분 tcp/ip이다.
osi가 tcp/ip와의 시장 점유 싸움에서 짐.
tcp에는 4개의 레이어로 이루어져있다.
네트워크+인터넷+트랜스포트+애플리케이션
tcp/ip모델이 업데이트 되면서 바뀜.
네트워크+인터넷+트랜스포트+애플리케이션->네트워크 계층이 osi모델의 1,2계층인 피지컬, 데이터 링크 레이어와 같아짐.
업데이트된 tcp/ip 모델은 osi 모델과 애플리케이션 레이어만 다르다.
업데이트된 tcp/ip는 섹션, 프레젠테이션, 애플리케이션 레이어를 애플리케이션 레이어 하나로 대체한다.
tcp/ip 소켓 프로그래밍 : 운영체제의 트랜스포트 레이어에서 api를 활용해 통신 가능한 프로그램을 만드는 것.
tcp/ip 소켓 프로그래밍을 통해 누구나 자신만의 애플리케이션 레이어 인코더, 디코더를 만들 수 있다.
누구든지 자신만의 애플리케이션 레이어 프로토콜을 만들어 사용할 수 있다.
애플리케이션도 인코더와 디코더가 있다. 대표적인 것이 http이다.
http가 대표적인 애플리케이션 프로토콜이다.
데이터 전송측 : 서버
데이터 수신측 : 클라이언트
(애플리케이션 인코더)http인코더를 통과하며 status code가 붙는다.
4계층 인코더에서 포트번호를 붙이고 1~3계층 인코더를 통해 아날로그 신호가 된다.

정리하면, 전송측 컴퓨터에서는 다음과 같은 일이 벌어진다.
5계층인 애플리케이션 인코더를 통과해 http 인코더라면 status같은 것들이 데이터에 포함되고
이것이 4계층 인코더를 거치면서 포트번호가 붙고
3계층 인코더를 거치면서 ip주소가 붙는다. 
2계층에서는 메세지가 0과 1로 바뀌고 
1계층에서 아날로그 신호로 바뀐다.
수신측 컴퓨터는 아날로그 신호를 받아 1->7계층까지 디코더를 통과해 데이터를 꺼낸다.
