https://www.youtube.com/watch?v=RP_f5dMoHFc

*하이라이트
uniform interface가 필요한 이유 : 독립적 진화
독립적 진화 : 서버와 클라이언트가 각각 독립적으로 진화한다.
서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다.
rest를 만들게 된 계기 : "how do i improve http without breaking the web."
rest를 가장 잘 따르며 성장한 것이 웹이다.
rest api는 하이퍼 텍스트를 포함한 self-descriptive한 메시지의 
uniform interface를 통해 리소스에 접근하는 api이다.

그런 rest api로 괜찮은가?
-어떤 이유로 나왔는가?
1.어떻게 인터넷에서 정보를 공유할 것인가?
=>정보들을 하이퍼 텍스트로 연결한다. http, html, uri.
=>http를 수정하면 기존의 웹하고 호환성 문제 생김.
=>http object model을 통해 그 문제를 해결함.
=>이것이 rest가 됨.(2000년에 논문으로 나옴.)

2.api : 애플리케이션 프로그래밍 인터페이스, 컴퓨터나 컴퓨터 프로그램 사이의 연결이다. 
xml-rpc(1998, 마이크로소프트)->soap.
salesforce api(2000.2, 거의 최초의 api) : 복잡하다.
flickr api(2004.8) : 짧아짐.
soap vs rest
복잡 vs 단순
규칙 많음 vs 적음
어려움 vs 쉬움
=>soap은 줄고 rest가 크게 성장함.
=>2006년 aws는 자사 api 사용량의 85%가 rest임을 밝힘.
그런데 2008년 cmis라는 것이 나옴.
하지만 rest 만든 사람은 그것이 rest가 아니라고 함.
마이크로 소프트에서 발표한 것 역시 그렇게 말함.
=>rest api는 진정 무엇인가?

3.rest 아키텍쳐 스타일
rest 아키텍쳐를 따르는 api
아키텍쳐 스타일은 제약 조건의 집합.
rest는 어떤 제약 조건으로 구성돼 있는가?
-클라이언트 서버, stateless, cache, uniform interface, layered system, code-on-demand(optional, ex) javascript)
uniform interface를 만족하는 것이 힘듦.

4.uniform interface의 제약 조건
identification of resource.(리소스가 uri로 식별되면 된다.)
manipulation of resources through representations.(representations 전송을 통해 리소스를 조정해야 한다.)
아래 두가지는 지켜지기 어려움. 대부분 못지킴.
self-descriptive messages.(메시지는 스스로를 설명해야 한다. 메세지만 보고 무엇인지 확실히 알 수 있어야 한다.)
hyper media  as the engine of application state.(hateoas)(애플리케이션의 상태는 하이퍼링크로 전이돼야 한다.)
애플리케이션 상태의 전이 : 애플리케이션에 하이퍼 링크를 통한 다른 페이지로 넘어갈 수 있는가?
uniform interface가 필요한 이유 : 독립적 진화
독립적 진화 : 서버와 클라이언트가 각각 독립적으로 진화한다.
서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다.
rest를 만들게 된 계기 : "how do i improve http without breaking the web."

*웹, rest가 지켜지고 있는가?
우리가 사용하는 웹은 매우 잘 지키고 있다.
어떤 웹 브라우저를 사용해도 접속이 잘된다.
브라우저를 업데이트 안된다고 접속이 안되지 않는다.
독립적으로 진화한다.
심지어 html 명세가 변경되어도 웹은 잘 동작한다.
앱에서는 rest가 제대로 구현되있지 않아 업데이트를 하지 않으면 동작하지 않는 경우가 많다.
이런 것들이 웹에서 가능한 이유는 w3s 등과 같은 집단 덕분이다.
상호운영성을 위해 엄청 노력한다.
잘못된 이름을 그대로 사용하는 이유이기도 하다.
크롬에서는 http0.9를 아직도 지원함.
이렇듯 웹은 독립적 진화, 상호운용성을 위해 부단히 노력중이다.
-rest가 웹의 독립적 진화에 도움을 주었는가?
http에 지속적으로 영향을 줌.
host 헤더 추가.
http1.1 명세 최신판에는 rest에 대한 언급이 들어감.
-rest는 성공했는가?
웹은 독립적으로 진화하고 있다.
-rest api는 대체로 rest 제약조건을 대체로 모두 만족하지는 않음.
-rest api는 하이퍼 텍스트를 포함한 self-descriptive한 메시지의 
uniform interface를 통해 리소스에 접근하는 api이다.