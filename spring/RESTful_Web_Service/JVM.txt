JVM 심화학습
https://velog.io/@litien/JVM-%EA%B5%AC%EC%A1%B0
jvm은 자바 바이트 코드를 실행할 수 있는 주체로 jvm덕분에 cpu나 운영체제와 독립적으로 동작이 가능하다.
jvm은 크게 class loader, garbage collector, excute engine로 나뉜다.

-runtime data area 구성
method : 클래스 멤버 변수, 메소드 정보, class/interface 정보, static, final 변수등 저장, 상수풀도 존재.
heap : 동적으로 생성되는 오브젝트와 배열이 저장되는 곳 garbage collection의 대상이 되는 영역.
stack : 지역 변수, 파라미터 등이 생성됨 단 실제 객체는 HEAP에 할당되고 레퍼런스만 STACK에 저장됨. 쓰레드 별로 독자적으로 움직임.
(heap에 있는 오브젝트가 stack에서 참조할 수 없는 경우 GC의 대상이 된다.)
pc register : 현재 쓰레드가 실행되는 부분의 주소와 명령을 저장.(CPU의 register는 아님.)
native method stack : 자바외 언어로 작성된 네이티브 코드를 위한 메모리.
=>메모리의 효율적인 사용을 위해서는 참조가 빈번한 것은 method영역에 빈번하지 않은 것은 HEAP영역에 두는 것이 좋다.

-구체적인 실행과정
1.개발자가 .java파일을 생성한다.
2.java 컴파일러가 .java파일을 읽고 .class 파일(바이트 코드)을 생성한다.
3..class 파일을 jvm의 class loader가 runtime data area 형태로 메모리에 적재한다.
4.execution engine가 메모리에 적재된 클래스들을 기계어로 변경해 명령어 단위로 실행한다.
execution engine는 명령어를 하나하나 실행하고 자주 쓸만한 코드를 기계어로 변환 시켜 저장한다.(jit 방식)
5.heap 메모리 영역에 생성된 객체들 중 reachability를 잃은 객체를 탐색후 제거한다.

-classloader

