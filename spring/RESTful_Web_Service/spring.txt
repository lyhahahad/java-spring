spring을 사용하면 Java 엔터프라이즈 애플리케이션을 쉽게 만들 수 있습니다. 
JVM에서 대체 언어로 Groovy 및 Kotlin을 지원하고 애플리케이션의 요구 사항에 따라 
다양한 종류의 아키텍처를 생성할 수 있는 유연성을 통해 엔터프라이즈 환경에서 Java 언어를 수용하는 데 필요한 모든 것을 제공합니다. 
Spring Framework 5.1부터 Spring은 JDK 8+(Java SE 8+)를 필요로 하며 JDK 11 LTS에 대한 기본 지원을 제공합니다. Java SE 8 업데이트 60은 Java 8의 최소 패치 릴리스로 제안되지만 일반적으로 최신 패치 릴리스를 사용하는 것이 좋습니다.
Spring Framework는 모듈로 나뉩니다. 애플리케이션은 필요한 모듈을 선택할 수 있습니다. 
핵심에는 구성 모델 및 종속성 주입 메커니즘을 포함하는 코어 컨테이너의 모듈이 있습니다. 
그 외에도 Spring Framework는 메시징, 트랜잭션 데이터 및 지속성, 
웹을 포함한 다양한 애플리케이션 아키텍처에 대한 기본 지원을 제공합니다. 
여기에는 Servlet 기반 Spring MVC 웹 프레임워크와 병렬로 Spring WebFlux 반응 웹 프레임워크도 포함됩니다.

-ioc 컨테이너 : spring의 가장 핵심적인 부분
aop : 관점 지향 프로그래밍, 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다.
ioc는 di(종속성 주입)라고도 한다.
종속성 주입 : 위와 같이 필요한(의존하는) 클래스를 직접 생성하는 것이 아닌, 주입해줌으로써 객체 간의 결합도를 줄이고 좀 더 유연한 코드를 작성할 수 있게됩니다.
즉, 한 클래스를 수정하였을 때, 다른 클래스도 수정해야 하는 상황을 막아줄 수 있습니다.
org.springframework.beans및 org.springframework.context패키지는 Spring 프레임 워크의 IoC 컨테이너의 기초입니다
bean은 ioc가 관리하는 객체들. bean들의 의존성을 관리하고 객체를 만들어주며 bean을 등록해줄 수 있다.

자바 파일의 경우 일반적으로 진입점을 main함수를 통해 컨트롤할 수 있다.
하지만 스프링을 사용할 경우 진입점에서 프레임워크를 실행하는 작업만 수행하고 내가 작성한 코드는 따로 호출하지 않는다.
spring의 경우 @springBootApplication이 진입점이 된다.
해당 코드에서 SpringApplication.run만 실행되고 내가 작성한 코드는 실행되지 않는다.
내가 작성한 코드(객체)는 언제 생성, 초기화, 실행, 소멸하는가 이것을 알아서 처리해주는게 프레임워크의 컨테이너이다.
스프링은 유저의 요청이 들어오면 처리한다.
보통은 main함수에서 실행흐름을 컨트롤하는데
스프링에서는 run만 호출되면 컨테이너가 이것을 처리해준다.
개발자는 configuration을 작성하고 객체의 비즈니스 로직을 채우는 작업만 해주면 된다.
어떤 객체를 어느 시점에 생성하고 사용할지는 컨테이너가 제어한다.
이처럼 프로그램의 실행흐름이나 객체의 생명주기를 개발자가 아니라 컨테이너가 제어하는 것을 ioc라고 부른다.
구체적으로는 main함수에서 실행 흐름을 개발자가 제어할 수 없고 run만 실행하면 컨테이너에서 사용자의 요청에 따라 실행 흐름을 처리해주는 것이다.

-beans
컨테이너는 객체를 관리하는데 해당 객체들을 빈이라고 부른다.
@controller
@service
@repository
@component 
위의 네가지 어노테이션을 사용하면 해당 클래스를 빈으로 등록할 수 있다.
@bean도 존재한다.
@bean은 직접 만든 객체가 아니라 외부 객체를 빈으로 만들고 싶을 때 사용한다.

-di
