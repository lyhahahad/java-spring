하이라이트
1.maven, gradle 등 빌드툴 사용이유 : 프로그램 공유시 라이브러리 압축해 전달할 필요없음, 개발자들이 모두 동일한 환경에서 개발할 필요가 없음.
2.https://mvnrepository.com/ 에서 라이브러리 찾을 수 있음.
3.위의 사이트에서 원하는 라이브러리의 정보를 gradle dependencies에 추가하면 사용할 수 있다.
4.다운로드 위치는 사용자 폴더 아래에 .gradle폴더 하위에 원격으로 다운로드함.

https://sharplee7.tistory.com/6
gradle은 groovy로 개발돼 자바 개발자들에게 익숙한 빌드 도구이다.
구글 안드로이드 사용자를 중심으로 최근 사용자가 많아지고 있다.
자바 초창기 유명한 빌드 도구는 ant였지만 ant가 배우기 쉽고 사용하기 쉽지만
라이브러리 레파지토리 관리 기능이 없어 maven이 그 자리를 대체했습니다.
그러나 xml기반의 maven은 설치, 설정 등의 절차가 까다로워 점점 더 많은 사용자들이 gradle로 옮겨가는 추세이다.
gradle 파일 이해
gradle은 java, groovy, scala, maven 빌드를 지원한다.
프로젝트 폴더를 만들고
프로젝트를 초기화하고
build.gradle을 수정한다./

1.gradle init = gradle 기초 셋업
2.build.gradle 생성됨. apply plugin: 'java' 추가
3.gradle build ->build 폴더 생성 컴파일된 파일이 있는 classes 폴더에 저장됨.
테스트 보고서 reports 폴더에 생성, libs에 조립된 프로젝트 라이브러리 생성.

종속성 선언
간단한 Hello World 샘플은 완전히 독립적이며 추가 라이브러리에 의존하지 않습니다. 
그러나 대부분의 응용 프로그램은 공통 및/또는 복잡한 기능을 처리하기 위해 외부 라이브러리에 의존합니다.
예를 들어, "Hello World!"라고 말하는 것 외에도 애플리케이션이 현재 날짜와 시간을 인쇄하기를 원한다고 가정합니다. 
기본 Java 라이브러리에서 날짜 및 시간 기능을 사용할 수 있지만 Joda Time 라이브러리를 사용하여 더 흥미롭게 만들 수 있습니다.
여기 HelloWorld에서는 Joda Time의 LocalTime클래스를 사용하여 현재 시간을 가져오고 인쇄합니다.
지금 프로젝트를 빌드하기 위해 실행했다면 gradle build빌드에서 Joda Time을 컴파일 종속성으로 선언하지 않았기 때문에 빌드가 실패합니다.
우선 타사 라이브러리에 대한 소스를 추가해야 합니다.

https://willbesoon.tistory.com/93
gradle 구조.
1. /.gradle, /gradle = gradle 버전별 엔진 및 설정 파일.
2. /.idea = 에디터 관련 파일들.
3. /gradlew, /gradlew.bat = gradle 명령 파일.
4. settings.gradle = 빌드할 프로젝트 정보 설정.
5. build.gradle = 프로젝트 빌드에 대한 모든 기능 정의.
6. /src = 자바 소스 파일.

build life cycle
1.initialization : 빌드 대상 프로젝트를 결정하고 각각에 대한 프로젝트 객체를 생성.
setting.gradle 파일에서 프로젝트 구성(멀티 프로젝트, 싱글 프로젝트 구분/ 싱글 프로젝트의 경우 생략 가능)
2.configuration : 빌드 대상이 되는 모든 프로젝트의 빌드 스크립트 실행
3.execution : 구성 단계에서 생성하고 설정된 프로젝트의 태스크 중에 실행 대상 결정.(main에서 조절?)

plugin 설정
plugin은 미리 구성해 놓은 task들의 그룹이며 특정 빌드 과정에 필요한 기본정보를 포함하고 필요에 따라 정보를 수정하여 목적에 맞게 사용할 수 있다.

build.gradle
-dependencies
implementation : 프로젝트 컴파일 과정에서 필요한 라이브러리.
providedcompile : 컴파일시에는 필요하지만 배포시에는 제외될 수 있는 dependency를 설정한다.
providedruntime : runtime시에만 필요하고 실행 환경에서 제공되는 dependency를 설정한다.
testimplementation : test시에 필요한 dependency 관리.

https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management

https://linkeverything.github.io/study/springboot/add-library/
라이브러리는 객체, 함수의 집합.
자주 사용되는 것을 라이브러리로 만들면 개발 편의성을 향상시킬 수 있다.
하지만 개별 라이브러리에 존재하는 오류나 버스 요소 때문에 프로그램에 부정적인 영향을 주기도 한다.
과거에는 라이브러리를 lib, libs 폴더를 만들고 그 안에서 관리했다.
이는 개발자들이 모두 동일한 환경에서 구축해야 동일한 결과를 얻을 수 있다는 한계점이 있었다.
프로그램 자체를 공유해야 하는 경우 라이브러리들까지 모두 압축해 보내야 하는 불편함도 존재.
이를 해결하기 위해 나온 것이 maven과 gradle이다.
안드로이드는 gradle, springboot는 gradle, spring쪽에서는 비등비등하다.
gradle을 사용하는 것이 일반적으로 더 좋다.(groovy 언어 사용으로 훨씬 관리가 편하다.)
